Proposal for an Integrated Translation Management Application

Synopsis: 

Translation of open source applications - like open source
applications themselves, depend on the whims of would-be translators. There
is a need for an application that will both cater to the need of individual
translators to 'scratch their itch' and translate as much as they want of
portions they want and at the same time allow the application developer to
coordinate the efforts of individuals and maintain an adequate level of
accuracy and consistency. 

The application should cater to both sporadic or
'one-off' online translation efforts and more consistent off-line efforts.

In addition the application should build a basic database of strings with
translations in the languages catered to - and offer either automatic
translation of strings already in the database, or hints for already
translated strings.

The application should, at a later stage cater to translation of
documentation - which has to be served to the translator para or section
wise unlike translation of source which is served string by string.

It goes without saying that the application should be free software,
multiplatform and multilingual. It is also clear that any such application
has to be web based.

Existing efforts:

We have investigated Rosetta, Pootle and Entrans (put the URLs). Rosetta is
proprietory software. Pootle, written in python has the idea correct, but
it uses a filesystem to store everything and probably wont scale. Entrans
uses php and mysql, which we feel are not stable or secure enough for an
application of this nature - and from the documentation does not appear to
have the comprehensive aims of this project. However elements of it's user
interface are good and could be incorporated into this project.

Platform:

We propose using the Python scripting language with Postgresql RDBMS as a
backend. The webserver will be Apache. We will be using other tools and
frameworks not limited to django, subversion, plone and trac for scripting
various parts of the project. Both Python and Postgresql are stable, mature and
inherently secure and used worldwide on an immense range of products and
applications. Further, python being an easy to master scripting language,
more non-technical people will be encouraged to hack at and contribute to
the project.

Workflow:

The Application developer registers an application and uploads the POT file.
He also gives the file version. The application will treat each version of the
PO file as a different file. The developer may opt for automatic
translation, in which case all the strings available in the database will
be translated into all the languages available and saved as drafts.
Similarly, any translation by a non authorised translator will also be
saved as drafts as and when they are done. The developer, and anyone
authorised by him can approve of drafts, wholly or partially and merge them
into the official version. This official version will be presented to all
translators who wish to translate the file wholly or partially.

All translations of strings in all official versions will be added to the
database. In case of more than one translation of a string into a given
lanuguage, all translations will be added and it is left to individual
developers to choose the one they want.

There will be a facility for experts in particular languages to review the
database and cull out obviously incorrect translations, correct spellings,
mark any one translation as 'preferred' and remove almost identical duplic
ates. 

Translators will be able to use the online interface as well as upload
translations made offline. Submitting translations by email will also be
catered to, but this will not have an automatic interface. The developer
will have to accept responsibility for accepting email submissions and the
translator will have to get the consent of the developer to submit my
email.

other bits left for GNUlinuxer to do:

* Statistics -- Must have  

* Online Review -- Must have

* Consistency Checking -- Must have

* Version Control -- A basic form of VC should be there, nothing too
  ambitious, but there will be a way to mark a PO file to be a part of x
  version of y app while uploading. The app will in any case treat PO
  files of different version as separate files. So in a way, the VC will
  be at a higher level than the app itself



* Downloads -- A way to filter translations according to language,
  product, etc. and download tarballs

* Minor Points
  -- Translated UI
  -- Extensive Online Documentation
  -- Email Interface
  -- Screenshot Gallery (?)

* TODO -- Think of more features to put in  

Schedule:

We will have a server up and running with a basic version of the
application within a month of starting the project. Working with active
developers and translators, the application will be fine-tuned over a
period of 6 months to a year. 

Funding:

1. Hosting space with root access along with subversion, python, apache2,
mod_python, postgresql and a few GB of diskspace - $400 per year is the
going rate.

2. Can we ask for a couple of ibooks?

BG - add some stuff here

Developers:

The developers are:

1. BG - resume here

2. Kenneth Gonsalves: An opensource developer. Resume is http://avsap.org.in

Other developers will be welcome to join the project which will iniitally
be hosted at berlios.de




